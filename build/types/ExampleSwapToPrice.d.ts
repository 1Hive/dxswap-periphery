/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ExampleSwapToPrice extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ExampleSwapToPrice;
  methods: {
    computeProfitMaximizingTrade(
      truePriceTokenA: number | string,
      truePriceTokenB: number | string,
      reserveA: number | string,
      reserveB: number | string,
      swapFee: number | string
    ): TransactionObject<{
      aToB: boolean;
      amountIn: string;
      0: boolean;
      1: string;
    }>;

    factory(): TransactionObject<string>;

    router(): TransactionObject<string>;

    swapToPrice(
      tokenA: string,
      tokenB: string,
      truePriceTokenA: number | string,
      truePriceTokenB: number | string,
      maxSpendTokenA: number | string,
      maxSpendTokenB: number | string,
      to: string,
      deadline: number | string
    ): TransactionObject<void>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
